name: Build Electron App

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x64, arm64]
        include:
          - os: macos-latest
            platform: mac
            artifact_name: mac
            arch: x64
          - os: macos-latest
            platform: mac
            artifact_name: mac
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            artifact_name: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            artifact_name: linux
            arch: arm64
          - os: windows-latest
            platform: win
            artifact_name: win
            arch: x64
          - os: windows-latest
            platform: win
            artifact_name: win
            arch: arm64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store path
        id: pnpm-store
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            node_modules
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Electron App
        run: pnpm run build -- --platform ${{ matrix.platform }} --arch ${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.artifact_name }}-${{ matrix.arch }}
          path: |
            dist/*.exe
            dist/*.deb
            dist/*.AppImage
            dist/*.dmg
          retention-days: 1
          overwrite: true

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug Artifacts
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}